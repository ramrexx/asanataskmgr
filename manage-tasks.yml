- set_fact:
    tsk_gid: ''
    title_prefix: "({{customer_name}}) - ({{opp_number}}) - ({{csv_index+1}}/{{num_ops}})"
    completed_opp: false

# Loop through project_tasks looking for a matching task name that contains the opportunity number
- name: Opp {{title_prefix}} - Check to see if the task already exists
  vars:
    _query: "[?contains(name, '{{ opp_number }}')].gid | [0]"
  set_fact:
    tsk_gid: "{{ project_tasks.json.data | to_json | from_json | json_query(_query) }}"

- debug:
    var: tsk_gid
  when: tsk_gid != ''

# Match the gid of the asana templates to clone (TBD)
- name: Opp {{title_prefix}} - Set asana_task_template
  set_fact:
    asana_task_template: "{{asana_template_tasks[default_task]}}"
  when: tsk_gid == ''

- debug:
    var: asana_task_template
  when: tsk_gid == ''

# Clone the asana_task_template with all of the subtasks preloaded
- block:
  - name: Opp {{title_prefix}} - Cloning asana_task_template({{asana_task_template}})
    uri:
      url: "{{ asana_api }}/tasks/{{asana_task_template}}/duplicate"
      headers:
        Authorization: "{{asana_token}}"
      method: POST
      body:
        data:
          include:
          - attachments
          - dependencies
          - notes
          - assignee
          - parent
          - projects
          - subtasks
          - notes
          - tags
          name: "{{opp_number}} - {{customer_name}} - {{opp_name}}"
      body_format: json
      validate_certs: "{{ validate_certs }}"
      status_code: 200,201
    when: tsk_gid == ''
    register: cloned_task

  # Set tsk_gid to the newly cloned task
  - name: Opp {{title_prefix}} - Set tsk_gid of new task
    set_fact:
      tsk_gid: "{{cloned_task.json.data.new_task.gid}}"
  when: tsk_gid == ''

- debug:
    var: tsk_gid

# # Match the gid of the asana section
# - block:
#   - name: Opp {{title_prefix}} - Set section_gid
#     set_fact:
#       section_gid: "{{asana_sections[programs]}}"
#     failed_when: "',' in {{ programs }}"
#   rescue:
#     - name: Opp {{title_prefix}} - Set asana_opp_type to Multi-Select / Needs Attention
#       set_fact:
#         section_gid: "{{ asana_sections[fixme] }}"
#
# - debug:
#     var: section_gid
#
# # Move the task to the appropriate asana section (Commit, Best Case, Pipeline, else Closed)
# - name: Opp {{title_prefix}} - Move task to the appropriate section
#   uri:
#     url: "{{ asana_api }}/sections/{{section_gid}}/addTask"
#     headers:
#       Authorization: "{{asana_token}}"
#     method: POST
#     body:
#       data:
#         task: "{{tsk_gid}}"
#     body_format: json
#     validate_certs: "{{ validate_certs }}"
#     status_code: 200
#   register: addtask_to_section

# Match the gid of the Fiscal Quarters (Q1, Q2, Q3, Q4)
- name: Opp {{title_prefix}} - Set fiscal_quarter({{fiscal_quarter}})
  set_fact:
    asana_fq: "{{asana_fiscal_quarters[fiscal_quarter]}}"

- debug:
      var: asana_fq

# Match the gid of the ForecastCategory (Commit, Best Case, Pipeline, Closed)
- name: Opp {{title_prefix}} - Set forecast_category({{forecast_category}})
  set_fact:
    asana_fc: "{{forecast_categories[forecast_category]}}"

- debug:
      var: asana_fc

# Match the gid of the Stage
- name: Opp {{title_prefix}} - Set forecast_category({{stage}})
  set_fact:
    asana_stage: "{{sfdc_stages[stage]}}"

- debug:
      var: asana_stage

# Match the gid of the nac region
- name: Opp {{title_prefix}} - Set nac_region({{na_region}})
  set_fact:
    asana_nac_region: "{{nac_regions[na_region]}}"

- debug:
      var: asana_nac_region


# Match the gid of the nac subregion
- name: Opp {{title_prefix}} - Set subregion({{subregion}})
  set_fact:
    asana_subregion: "{{nac_subregions[subregion]}}"

- debug:
      var: asana_subregion

# Update task with notes, custom fields
- name: Opp {{title_prefix}} - Update task notes and custom fields
  uri:
    url: "{{ asana_api }}/tasks/{{tsk_gid}}"
    headers:
      Authorization: "{{asana_token}}"
    method: PUT
    body:
      data:
        custom_fields:
          # custom text fields
          '1182531335993465': "{{ opp_owner }}" # AE (Global)
          '1195217282482432': "{{ opp_number }}" # Opportunity Number (Global)
          '1200113936496375': "https://redhat.my.salesforce.com/{{ opp_id }}" # SFDC Link (Global)
          '1200114261516681': "{{ tb }}" # TB (Global)
          '1200038584667544': "{{ syb }}" # SYB (Global)
          '1200291243594269': "{{ asana_stage }}" # SFDC Stage (Global)
          '1200204527019766': "{{ reseller }}" # Reseller (Global)
          '1200291243594213': "{{ asana_nac_region }}" # NAC Region (Global)
          '1200244002339995': "{{ asana_subregion }}" # NAC Subregion (Global)
          '1200291243594278': "{{ probability }}" # probability (Global)
          # custom dropdown field names
          '1200008973756201': "{{ asana_fq }}" # Fiscal Quarter (Global)
          '1200235633617549': "{{ asana_fc }}" # ForecastCategory (Global)
        start_on: "{{ start_date }}" # start date
        due_on: "{{ close_date }}" # close date
        # reset the task name in case it was changed
        name: "{{ opp_number }} - {{ customer_name }} - {{ opp_name }}"
        notes: |
          Opportunity Owner: {{ opp_owner }}
          Product Details: {{ product_detail }}
          Next Step:
          {{next_step}}

    body_format: json
    validate_certs: "{{ validate_certs }}"
    status_code: 200,201
  ignore_errors: true
  register: update_task

# Lopp through the normalized products and apply product_tags
# RFE: Look through project_tasks for the gid to make this more dynamic
- name: Opp {{title_prefix}} - Adding products({{products}}) to task
  uri:
    url: "{{ asana_api }}/tasks/{{tsk_gid}}/addTag"
    headers:
      Authorization: "{{asana_token}}"
    method: POST
    body:
      data:
        tag: "{{product_tags[pt]}}"
    body_format: json
    validate_certs: "{{ validate_certs }}"
    status_code: 200,201
  ignore_errors: true
  register: add_tags
  loop: "{{products.split('|')}}"
  loop_control:
    loop_var: pt
